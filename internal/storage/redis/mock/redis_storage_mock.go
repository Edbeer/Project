// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edbeer/Project/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSessionRedis is a mock of SessionRedis interface.
type MockSessionRedis struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRedisMockRecorder
}

// MockSessionRedisMockRecorder is the mock recorder for MockSessionRedis.
type MockSessionRedisMockRecorder struct {
	mock *MockSessionRedis
}

// NewMockSessionRedis creates a new mock instance.
func NewMockSessionRedis(ctrl *gomock.Controller) *MockSessionRedis {
	mock := &MockSessionRedis{ctrl: ctrl}
	mock.recorder = &MockSessionRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRedis) EXPECT() *MockSessionRedisMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionRedis) CreateSession(ctx context.Context, session *entity.Session, expire int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionRedisMockRecorder) CreateSession(ctx, session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRedis)(nil).CreateSession), ctx, session, expire)
}

// DeleteSession mocks base method.
func (m *MockSessionRedis) DeleteSession(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionRedisMockRecorder) DeleteSession(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionRedis)(nil).DeleteSession), ctx, refreshToken)
}

// GetUserID mocks base method.
func (m *MockSessionRedis) GetUserID(ctx context.Context, refreshToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, refreshToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockSessionRedisMockRecorder) GetUserID(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockSessionRedis)(nil).GetUserID), ctx, refreshToken)
}
