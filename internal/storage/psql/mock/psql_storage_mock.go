// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edbeer/Project/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserPsql is a mock of UserPsql interface.
type MockUserPsql struct {
	ctrl     *gomock.Controller
	recorder *MockUserPsqlMockRecorder
}

// MockUserPsqlMockRecorder is the mock recorder for MockUserPsql.
type MockUserPsqlMockRecorder struct {
	mock *MockUserPsql
}

// NewMockUserPsql creates a new mock instance.
func NewMockUserPsql(ctrl *gomock.Controller) *MockUserPsql {
	mock := &MockUserPsql{ctrl: ctrl}
	mock.recorder = &MockUserPsqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPsql) EXPECT() *MockUserPsqlMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserPsql) Create(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserPsqlMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserPsql)(nil).Create), ctx, user)
}

// FindUserByEmail mocks base method.
func (m *MockUserPsql) FindUserByEmail(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserPsqlMockRecorder) FindUserByEmail(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserPsql)(nil).FindUserByEmail), ctx, user)
}

// GetUserByID mocks base method.
func (m *MockUserPsql) GetUserByID(ctx context.Context, userID uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserPsqlMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserPsql)(nil).GetUserByID), ctx, userID)
}
